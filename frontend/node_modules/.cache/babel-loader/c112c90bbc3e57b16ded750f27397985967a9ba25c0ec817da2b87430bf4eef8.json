{"ast":null,"code":"var _jsxFileName = \"/Users/arjunrajaram/FriendMe/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport ReactSlider from \"react-slider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [radius, setRadius] = useState(0);\n  const [introduction, setIntroduction] = useState(\"\");\n  const [latitude, setLatitude] = useState(0.0);\n  function handleIntroInput(e) {\n    setIntroduction(e.target.value);\n  }\n  async function QueryUser(e) {\n    e.preventDefault();\n    console.log(\"User Introduction:\", introduction);\n    /* Now that we have intro state and radius state, we need to send this info using a await fetch call to the server */\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Friend.me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"videos\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        class: \"video-player\",\n        id: \"user-1\",\n        autoplay: true,\n        playsinline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        class: \"video-player\",\n        id: \"user-2\",\n        autoplay: true,\n        playsinline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"userInput\",\n      children: \"Tell us a little bit about yourself: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"userInput\",\n      name: \"userInput\",\n      placeholder: \"Type your introduction\",\n      value: introduction,\n      onChange: handleIntroInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactSlider, {\n      className: \"customSlider\",\n      trackClassName: \"customSlider-track\",\n      thumbClassName: \"customSlider-thumb\",\n      markClassName: \"customSlider-mark\",\n      marks: 20,\n      min: 0,\n      max: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n      title: \"Find\",\n      onClick: QueryUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"siPjK4lmiyrOsE4mk7mNtA7nIJo=\");\n_c = App;\nfunction SubmitButton({\n  title,\n  onClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onClick,\n    children: [\" \", title, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_c2 = SubmitButton;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"SubmitButton\");","map":{"version":3,"names":["useState","ReactSlider","jsxDEV","_jsxDEV","App","_s","radius","setRadius","introduction","setIntroduction","latitude","setLatitude","handleIntroInput","e","target","value","QueryUser","preventDefault","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","class","autoplay","playsinline","for","type","name","placeholder","onChange","trackClassName","thumbClassName","markClassName","marks","min","max","SubmitButton","title","onClick","_c","_c2","$RefreshReg$"],"sources":["/Users/arjunrajaram/FriendMe/frontend/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport ReactSlider from \"react-slider\";\n\nfunction App() {\n  const [radius, setRadius] = useState(0);\n  const [introduction, setIntroduction] = useState(\"\");\n  const [latitude, setLatitude] = useState(0.0);\n  \n  \n  function handleIntroInput(e) {\n    setIntroduction(e.target.value)\n  }\n\n  async function QueryUser(e) {\n    e.preventDefault();\n\n    console.log(\"User Introduction:\", introduction);\n    /* Now that we have intro state and radius state, we need to send this info using a await fetch call to the server */\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Friend.me</h2>\n\n      <div id = \"videos\">\n        <video class=\"video-player\" id=\"user-1\" autoplay playsinline></video>\n        <video class=\"video-player\" id=\"user-2\" autoplay playsinline></video>\n      </div>\n\n      <label for=\"userInput\">Tell us a little bit about yourself: </label>\n      <input type=\"text\" id=\"userInput\" name=\"userInput\" placeholder=\"Type your introduction\" value = {introduction} onChange = {handleIntroInput}/>\n\n      {/*Also need to add some sort of slider for the radius and then need to set that radius state*/}\n      {/*Also need some geolocation state as well to get lat and longitude right? */}\n\n      <ReactSlider \n        className=\"customSlider\"\n        trackClassName=\"customSlider-track\"\n        thumbClassName=\"customSlider-thumb\"\n        markClassName='customSlider-mark'\n        marks = {20}\n        min = {0}\n        max = {100}\n      />\n\n      <SubmitButton title=\"Find\" onClick={QueryUser}/>\n    </div>\n  );\n}\n\nfunction SubmitButton({title, onClick}) {\n  return (\n    <button onClick={onClick}> {title} </button>\n  )\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}